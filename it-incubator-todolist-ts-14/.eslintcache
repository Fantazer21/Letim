[{"C:\\Letim\\it-incubator-todolist-ts-14\\src\\index.tsx":"1","C:\\Letim\\it-incubator-todolist-ts-14\\src\\AddItemForm.tsx":"2","C:\\Letim\\it-incubator-todolist-ts-14\\src\\api\\todolists-api.ts":"3","C:\\Letim\\it-incubator-todolist-ts-14\\src\\Todolist.tsx":"4","C:\\Letim\\it-incubator-todolist-ts-14\\src\\state\\tasks-reducer.ts":"5","C:\\Letim\\it-incubator-todolist-ts-14\\src\\App.tsx":"6","C:\\Letim\\it-incubator-todolist-ts-14\\src\\state\\to-do-lists-reducer.ts":"7","C:\\Letim\\it-incubator-todolist-ts-14\\src\\state\\store.ts":"8","C:\\Letim\\it-incubator-todolist-ts-14\\src\\EditableSpan.tsx":"9","C:\\Letim\\it-incubator-todolist-ts-14\\src\\reportWebVitals.ts":"10"},{"size":641,"mtime":1611424226000,"results":"11","hashOfConfig":"12"},{"size":1474,"mtime":1594727720000,"results":"13","hashOfConfig":"12"},{"size":2512,"mtime":1629533784042,"results":"14","hashOfConfig":"12"},{"size":3746,"mtime":1629533456308,"results":"15","hashOfConfig":"12"},{"size":6563,"mtime":1629563823492,"results":"16","hashOfConfig":"12"},{"size":4836,"mtime":1629562659564,"results":"17","hashOfConfig":"12"},{"size":3824,"mtime":1629560377536,"results":"18","hashOfConfig":"12"},{"size":894,"mtime":1629375278608,"results":"19","hashOfConfig":"12"},{"size":952,"mtime":1594154724000,"results":"20","hashOfConfig":"12"},{"size":425,"mtime":1607869388000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1kqhi3i",{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Letim\\it-incubator-todolist-ts-14\\src\\index.tsx",[],["45","46"],"C:\\Letim\\it-incubator-todolist-ts-14\\src\\AddItemForm.tsx",["47","48","49"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\Letim\\it-incubator-todolist-ts-14\\src\\api\\todolists-api.ts",[],"C:\\Letim\\it-incubator-todolist-ts-14\\src\\Todolist.tsx",["50","51","52","53","54","55"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/to-do-lists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [props.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","C:\\Letim\\it-incubator-todolist-ts-14\\src\\state\\tasks-reducer.ts",["56"],"C:\\Letim\\it-incubator-todolist-ts-14\\src\\App.tsx",["57","58","59","60","61","62","63","64","65","66","67"],"C:\\Letim\\it-incubator-todolist-ts-14\\src\\state\\to-do-lists-reducer.ts",["68"],"C:\\Letim\\it-incubator-todolist-ts-14\\src\\state\\store.ts",[],"C:\\Letim\\it-incubator-todolist-ts-14\\src\\EditableSpan.tsx",[],"C:\\Letim\\it-incubator-todolist-ts-14\\src\\reportWebVitals.ts",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":9,"nodeType":"75","messageId":"76","endLine":2,"endColumn":12},{"ruleId":"73","severity":1,"message":"77","line":2,"column":14,"nodeType":"75","messageId":"76","endLine":2,"endColumn":20},{"ruleId":"73","severity":1,"message":"78","line":2,"column":22,"nodeType":"75","messageId":"76","endLine":2,"endColumn":33},{"ruleId":"79","severity":1,"message":"80","line":33,"column":8,"nodeType":"81","endLine":33,"endColumn":18,"suggestions":"82"},{"ruleId":"79","severity":1,"message":"83","line":37,"column":8,"nodeType":"81","endLine":37,"endColumn":33,"suggestions":"84"},{"ruleId":"79","severity":1,"message":"83","line":44,"column":8,"nodeType":"81","endLine":44,"endColumn":45,"suggestions":"85"},{"ruleId":"79","severity":1,"message":"83","line":46,"column":86,"nodeType":"81","endLine":46,"endColumn":116,"suggestions":"86"},{"ruleId":"79","severity":1,"message":"83","line":47,"column":92,"nodeType":"81","endLine":47,"endColumn":122,"suggestions":"87"},{"ruleId":"79","severity":1,"message":"83","line":48,"column":98,"nodeType":"81","endLine":48,"endColumn":128,"suggestions":"88"},{"ruleId":"73","severity":1,"message":"89","line":4,"column":63,"nodeType":"75","messageId":"76","endLine":4,"endColumn":75},{"ruleId":"73","severity":1,"message":"90","line":12,"column":23,"nodeType":"75","messageId":"76","endLine":12,"endColumn":37},{"ruleId":"73","severity":1,"message":"91","line":15,"column":59,"nodeType":"75","messageId":"76","endLine":15,"endColumn":71},{"ruleId":"73","severity":1,"message":"92","line":15,"column":73,"nodeType":"75","messageId":"76","endLine":15,"endColumn":83},{"ruleId":"79","severity":1,"message":"80","line":34,"column":8,"nodeType":"81","endLine":34,"endColumn":10,"suggestions":"93"},{"ruleId":"79","severity":1,"message":"94","line":42,"column":8,"nodeType":"81","endLine":42,"endColumn":10,"suggestions":"95"},{"ruleId":"79","severity":1,"message":"94","line":47,"column":8,"nodeType":"81","endLine":47,"endColumn":10,"suggestions":"96"},{"ruleId":"79","severity":1,"message":"94","line":52,"column":8,"nodeType":"81","endLine":52,"endColumn":10,"suggestions":"97"},{"ruleId":"79","severity":1,"message":"94","line":57,"column":8,"nodeType":"81","endLine":57,"endColumn":10,"suggestions":"98"},{"ruleId":"79","severity":1,"message":"94","line":62,"column":8,"nodeType":"81","endLine":62,"endColumn":10,"suggestions":"99"},{"ruleId":"79","severity":1,"message":"94","line":67,"column":8,"nodeType":"81","endLine":67,"endColumn":10,"suggestions":"100"},{"ruleId":"79","severity":1,"message":"94","line":72,"column":8,"nodeType":"81","endLine":72,"endColumn":10,"suggestions":"101"},{"ruleId":"73","severity":1,"message":"102","line":77,"column":20,"nodeType":"75","messageId":"76","endLine":77,"endColumn":29},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["105"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["106"],["107"],["108"],["109"],["110"],"'TodolistType' is defined but never used.","'setToDoListsAC' is defined but never used.","'removeTaskAC' is defined but never used.","'setTasksAC' is defined but never used.",["111"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["112"],["113"],["114"],["115"],["116"],["117"],["118"],"'stateCopy' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"121","fix":"123"},{"desc":"121","fix":"124"},{"desc":"121","fix":"125"},{"desc":"121","fix":"126"},{"desc":"127","fix":"128"},{"desc":"127","fix":"129"},{"desc":"127","fix":"130"},{"desc":"127","fix":"131"},{"desc":"127","fix":"132"},{"desc":"127","fix":"133"},{"desc":"127","fix":"134"},{"desc":"127","fix":"135"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"136","text":"137"},"Update the dependencies array to be: [props]",{"range":"138","text":"139"},{"range":"140","text":"139"},{"range":"141","text":"139"},{"range":"142","text":"139"},{"range":"143","text":"139"},"Update the dependencies array to be: [dispatch]",{"range":"144","text":"145"},{"range":"146","text":"145"},{"range":"147","text":"145"},{"range":"148","text":"145"},{"range":"149","text":"145"},{"range":"150","text":"145"},{"range":"151","text":"145"},{"range":"152","text":"145"},[1291,1301],"[dispatch, props.id]",[1407,1432],"[props]",[1645,1682],[1772,1802],[1896,1926],[2026,2056],[1228,1230],"[dispatch]",[1510,1512],[1686,1688],[1900,1902],[2114,2116],[2318,2320],[2470,2472],[2654,2656]]